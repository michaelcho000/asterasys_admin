#!/usr/bin/env node

/**
 * YouTube Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïä§ÌÅ¨Î¶ΩÌä∏ - Node.js Î≤ÑÏ†Ñ
 * Asterasys ÎåÄÏãúÎ≥¥ÎìúÏö© YouTube Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
 */

const fs = require('fs');
const path = require('path');

class YouTubeDataProcessor {
  constructor(jsonFilePath) {
    this.jsonFilePath = jsonFilePath;
    this.outputDir = path.join(process.cwd(), 'data', 'processed', 'youtube');
    
    // 18Í∞ú ÏùòÎ£åÍ∏∞Í∏∞ Ï†ÑÏ≤¥ Îß§Ìïë (Í∏∞Ï°¥ CSV Îç∞Ïù¥ÌÑ∞ÏôÄ ÏùºÏπò)
    this.deviceMapping = {
      // RF Í∏∞Í∏∞Îì§ (9Í∞ú)
      'Ïç®ÎßàÏßÄ': { category: 'RF', rank: 1, company: 'Ïç∏', isAsterasys: false },
      'Ïù∏Î™®Îìú': { category: 'RF', rank: 2, company: 'Ïù∏Î∞îÏù¥Ïò§', isAsterasys: false },
      'Ïø®ÌéòÏù¥Ï¶à': { category: 'RF', rank: 3, company: 'Asterasys', isAsterasys: true }, // ‚≠ê
      'Îç¥ÏÑúÌã∞': { category: 'RF', rank: 4, company: 'Ïπ∏Îç∏Îùº', isAsterasys: false },
      'Ïò¨Î¶¨ÏßÄÏò§': { category: 'RF', rank: 5, company: 'ÏóòÎ†âÌÉÄ', isAsterasys: false },
      'Ìä†ÌéòÏù¥Ïä§': { category: 'RF', rank: 6, company: 'ÏïåÎßà', isAsterasys: false },
      'ÏÑ∏Î•¥ÌîÑ': { category: 'RF', rank: 7, company: 'ÌÅ¥Î†àÏãúÏä§', isAsterasys: false },
      'ÌÖêÏç®Îßà': { category: 'RF', rank: 8, company: 'Ìú¥Ïò®Ïä§', isAsterasys: false },
      'Î≥ºÎâ¥Î®∏': { category: 'RF', rank: 9, company: 'ÌÅ¥ÎûòÏãúÌÖåÌÅ¨', isAsterasys: false },
      
      // HIFU Í∏∞Í∏∞Îì§ (9Í∞ú)
      'Ïö∏ÏéÑÎùº': { category: 'HIFU', rank: 1, company: 'Î®∏Ï∏†', isAsterasys: false },
      'ÏäàÎßÅÌÅ¨': { category: 'HIFU', rank: 2, company: 'ÌóàÏâ¨Î©îÎìú', isAsterasys: false },
      'Ïø®ÏÜåÎãâ': { category: 'HIFU', rank: 3, company: 'Asterasys', isAsterasys: true }, // ‚≠ê
      'Î¶¨ÌîÑÌÖåÎùº': { category: 'HIFU', rank: 4, company: 'Asterasys', isAsterasys: true }, // ‚≠ê
      'Î¶¨ÎãàÏñ¥ÏßÄ': { category: 'HIFU', rank: 5, company: 'ÌÅ¥ÎûòÏãúÌÖåÌÅ¨', isAsterasys: false },
      'Î∏åÏù¥Î°ú': { category: 'HIFU', rank: 6, company: 'ÌÅ¥ÎûòÏãúÌÖåÌÅ¨', isAsterasys: false },
      'ÌÖêÏéÑÎùº': { category: 'HIFU', rank: 7, company: 'Ìú¥Ïò®Ïä§', isAsterasys: false },
      'Ìä†ÎùºÏù¥ÎÑà': { category: 'HIFU', rank: 8, company: 'ÏïåÎßà', isAsterasys: false },
      'Î¶¨ÎãàÏñ¥Ìéå': { category: 'HIFU', rank: 9, company: 'ÌÅ¥ÎûòÏãúÌÖåÌÅ¨', isAsterasys: false }
    };
    
    this.asterasysProducts = ['Ïø®ÌéòÏù¥Ï¶à', 'Î¶¨ÌîÑÌÖåÎùº', 'Ïø®ÏÜåÎãâ']; // Asterasys 3Í∞ú Ï†úÌíà
  }

  async loadData() {
    console.log('üöÄ YouTube Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë...');
    console.log(`üìÅ ÌååÏùº: ${this.jsonFilePath}`);
    
    try {
      const rawData = fs.readFileSync(this.jsonFilePath, 'utf8');
      this.data = JSON.parse(rawData);
      console.log(`‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å: ${this.data.length.toLocaleString()}Í∞ú Î†àÏΩîÎìú`);
      return this;
    } catch (error) {
      console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error.message);
      throw error;
    }
  }

  processBasicStats() {
    console.log('\nüìä Í∏∞Î≥∏ ÌÜµÍ≥Ñ Î∂ÑÏÑù...');
    
    // Í≤ÄÏÉâ ÌÇ§ÏõåÎìú Î∂ÑÌè¨ Î∂ÑÏÑù
    const keywordCounts = {};
    const deviceCounts = {};
    
    this.data.forEach(video => {
      const keyword = video.input?.trim();
      if (keyword) {
        keywordCounts[keyword] = (keywordCounts[keyword] || 0) + 1;
        
        // 18Í∞ú Ï†úÌíà Î∂ÑÎ•ò
        if (this.deviceMapping[keyword]) {
          deviceCounts[keyword] = (deviceCounts[keyword] || 0) + 1;
        }
      }
    });

    // Í≤ÄÏÉâ ÌÇ§ÏõåÎìú Ï†ïÎ†¨
    const sortedKeywords = Object.entries(keywordCounts)
      .sort(([,a], [,b]) => b - a);

    console.log('\nüîç Í≤ÄÏÉâ ÌÇ§ÏõåÎìú Î∂ÑÌè¨ (ÏÉÅÏúÑ 15Í∞ú):');
    sortedKeywords.slice(0, 15).forEach(([keyword, count]) => {
      const isAsterasys = this.deviceMapping[keyword]?.isAsterasys ? '‚≠ê' : '';
      const category = this.deviceMapping[keyword]?.category || '';
      console.log(`  ${keyword}${isAsterasys}: ${count.toLocaleString()}Í∞ú ${category}`);
    });

    this.keywordStats = {
      totalKeywords: Object.keys(keywordCounts).length,
      keywordCounts,
      deviceCounts,
      sortedKeywords
    };

    return this;
  }

  analyzeMarketShare() {
    console.log('\nüìà ÏãúÏû• Ï†êÏú†Ïú® Î∂ÑÏÑù...');
    
    const marketData = [];
    const totalVideos = this.data.length;
    const totalViews = this.data.reduce((sum, v) => sum + (parseInt(v.viewCount) || 0), 0);
    
    // 18Í∞ú Ï†úÌíàÎ≥Ñ Î∂ÑÏÑù
    Object.keys(this.deviceMapping).forEach(deviceName => {
      const deviceVideos = this.data.filter(v => v.input?.trim() === deviceName);
      const videoCount = deviceVideos.length;
      const totalDeviceViews = deviceVideos.reduce((sum, v) => sum + (parseInt(v.viewCount) || 0), 0);
      const totalLikes = deviceVideos.reduce((sum, v) => sum + (parseInt(v.likes) || 0), 0);
      const totalComments = deviceVideos.reduce((sum, v) => sum + (parseInt(v.commentsCount) || 0), 0);
      const uniqueChannels = new Set(deviceVideos.map(v => v.channelName)).size;
      
      const deviceInfo = this.deviceMapping[deviceName];
      
      marketData.push({
        deviceName,
        category: deviceInfo.category,
        marketRank: deviceInfo.rank,
        company: deviceInfo.company,
        isAsterasys: deviceInfo.isAsterasys,
        videoCount,
        videoSharePct: ((videoCount / totalVideos) * 100).toFixed(2),
        totalViews: totalDeviceViews,
        viewSharePct: totalViews > 0 ? ((totalDeviceViews / totalViews) * 100).toFixed(2) : '0.00',
        avgViews: videoCount > 0 ? Math.round(totalDeviceViews / videoCount) : 0,
        totalLikes,
        totalComments,
        engagementRate: totalDeviceViews > 0 ? (((totalLikes + totalComments) / totalDeviceViews) * 100).toFixed(3) : '0.000',
        uniqueChannels,
        avgViewsPerChannel: uniqueChannels > 0 ? Math.round(totalDeviceViews / uniqueChannels) : 0
      });
    });

    // ÎπÑÎîîÏò§ Ïàò Í∏∞Ï§Ä Ï†ïÎ†¨
    this.marketShareData = marketData.sort((a, b) => b.videoCount - a.videoCount);

    console.log('\nüèÜ ÏãúÏû• Ï†êÏú†Ïú® ÏàúÏúÑ (ÎπÑÎîîÏò§ Ïàò Í∏∞Ï§Ä):');
    this.marketShareData.forEach((device, index) => {
      const asterasysFlag = device.isAsterasys ? '‚≠ê' : '  ';
      const rankChange = device.marketRank !== (index + 1) ? 
        `(ÏãúÏû•Îû≠ÌÇπ ${device.marketRank}ÏúÑ ‚Üí YouTube ${index + 1}ÏúÑ)` : '';
      
      console.log(`${asterasysFlag}${index + 1}. ${device.deviceName} (${device.category})`);
      console.log(`    ÎπÑÎîîÏò§: ${device.videoCount.toLocaleString()}Í∞ú (${device.videoSharePct}%)`);
      console.log(`    Ï°∞ÌöåÏàò: ${device.totalViews.toLocaleString()}Ìöå (${device.viewSharePct}%)`);
      console.log(`    Ï±ÑÎÑêÏàò: ${device.uniqueChannels}Í∞ú | Ï∞∏Ïó¨ÎèÑ: ${device.engagementRate}% ${rankChange}`);
    });

    return this;
  }

  analyzeAsterasysPerformance() {
    console.log('\n‚≠ê Asterasys Ï†úÌíà ÏÑ±Í≥º Î∂ÑÏÑù...');
    
    const asterasysData = this.marketShareData.filter(d => d.isAsterasys);
    const competitorData = this.marketShareData.filter(d => !d.isAsterasys);
    
    // Asterasys Ï¥ùÌï©
    const totalAsterasysVideos = asterasysData.reduce((sum, d) => sum + d.videoCount, 0);
    const totalAsterasysViews = asterasysData.reduce((sum, d) => sum + d.totalViews, 0);
    const totalAsterasysChannels = asterasysData.reduce((sum, d) => sum + d.uniqueChannels, 0);
    
    // Ï†ÑÏ≤¥ ÏãúÏû• ÎåÄÎπÑ Ï†êÏú†Ïú®
    const totalMarketVideos = this.marketShareData.reduce((sum, d) => sum + d.videoCount, 0);
    const totalMarketViews = this.marketShareData.reduce((sum, d) => sum + d.totalViews, 0);
    
    const asterasysMarketShare = {
      videoSharePct: ((totalAsterasysVideos / totalMarketVideos) * 100).toFixed(2),
      viewSharePct: ((totalAsterasysViews / totalMarketViews) * 100).toFixed(2),
      avgViewsPerVideo: totalAsterasysVideos > 0 ? Math.round(totalAsterasysViews / totalAsterasysVideos) : 0
    };

    console.log(`üìä Asterasys Ï†ÑÏ≤¥ ÏÑ±Í≥º:`);
    console.log(`  Ï¥ù ÎπÑÎîîÏò§: ${totalAsterasysVideos.toLocaleString()}Í∞ú (ÏãúÏû•Ï†êÏú†Ïú® ${asterasysMarketShare.videoSharePct}%)`);
    console.log(`  Ï¥ù Ï°∞ÌöåÏàò: ${totalAsterasysViews.toLocaleString()}Ìöå (ÏãúÏû•Ï†êÏú†Ïú® ${asterasysMarketShare.viewSharePct}%)`);
    console.log(`  ÌèâÍ∑† Ï°∞ÌöåÏàò: ${asterasysMarketShare.avgViewsPerVideo.toLocaleString()}Ìöå/ÎπÑÎîîÏò§`);
    console.log(`  ÌôúÏÑ± Ï±ÑÎÑê: ${totalAsterasysChannels}Í∞ú`);

    console.log(`\nüî• Asterasys Ï†úÌíàÎ≥Ñ ÏÉÅÏÑ∏:`);
    asterasysData.forEach(product => {
      console.log(`  ${product.deviceName} (${product.category}):`);
      console.log(`    YouTube ÏàúÏúÑ: ${this.marketShareData.findIndex(d => d.deviceName === product.deviceName) + 1}ÏúÑ (ÏãúÏû•Îû≠ÌÇπ ${product.marketRank}ÏúÑ)`);
      console.log(`    ÎπÑÎîîÏò§: ${product.videoCount.toLocaleString()}Í∞ú | Ï°∞ÌöåÏàò: ${product.totalViews.toLocaleString()}Ìöå`);
      console.log(`    Ï±ÑÎÑê: ${product.uniqueChannels}Í∞ú | Ï∞∏Ïó¨ÎèÑ: ${product.engagementRate}%`);
    });

    this.asterasysInsights = {
      products: asterasysData,
      totalVideos: totalAsterasysVideos,
      totalViews: totalAsterasysViews,
      marketShare: asterasysMarketShare,
      topCompetitors: competitorData.slice(0, 5)
    };

    return this;
  }

  analyzeContentTrends() {
    console.log('\nüì± ÏΩòÌÖêÏ∏† Ìä∏Î†åÎìú Î∂ÑÏÑù...');
    
    // ÎπÑÎîîÏò§ ÌÉÄÏûÖ Î∂ÑÏÑù (Shorts vs ÏùºÎ∞ò)
    const typeAnalysis = {};
    const categoryAnalysis = { RF: {}, HIFU: {} };
    
    this.data.forEach(video => {
      const deviceName = video.input?.trim();
      const deviceInfo = this.deviceMapping[deviceName];
      
      if (!deviceInfo) return;
      
      const videoType = video.type || 'video';
      const category = deviceInfo.category;
      
      // ÌÉÄÏûÖÎ≥Ñ Î∂ÑÏÑù
      if (!typeAnalysis[deviceName]) {
        typeAnalysis[deviceName] = { shorts: 0, video: 0, shortsViews: 0, videoViews: 0 };
      }
      
      const views = parseInt(video.viewCount) || 0;
      if (videoType === 'shorts') {
        typeAnalysis[deviceName].shorts++;
        typeAnalysis[deviceName].shortsViews += views;
      } else {
        typeAnalysis[deviceName].video++;
        typeAnalysis[deviceName].videoViews += views;
      }
      
      // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÏÑù
      if (!categoryAnalysis[category][deviceName]) {
        categoryAnalysis[category][deviceName] = { count: 0, views: 0, engagement: 0 };
      }
      
      const likes = parseInt(video.likes) || 0;
      const comments = parseInt(video.commentsCount) || 0;
      
      categoryAnalysis[category][deviceName].count++;
      categoryAnalysis[category][deviceName].views += views;
      categoryAnalysis[category][deviceName].engagement += likes + comments;
    });

    // Shorts Ìö®Í≥º Î∂ÑÏÑù
    console.log('\nüé¨ Shorts vs ÏùºÎ∞ò ÎπÑÎîîÏò§ Î∂ÑÏÑù (ÏÉÅÏúÑ 10Í∞ú):');
    Object.entries(typeAnalysis)
      .sort(([,a], [,b]) => (b.shorts + b.video) - (a.shorts + a.video))
      .slice(0, 10)
      .forEach(([device, stats]) => {
        const totalVideos = stats.shorts + stats.video;
        const totalViews = stats.shortsViews + stats.videoViews;
        const shortsRatio = ((stats.shorts / totalVideos) * 100).toFixed(1);
        const shortsViewRatio = totalViews > 0 ? ((stats.shortsViews / totalViews) * 100).toFixed(1) : '0.0';
        const avgShortsViews = stats.shorts > 0 ? Math.round(stats.shortsViews / stats.shorts) : 0;
        const avgVideoViews = stats.video > 0 ? Math.round(stats.videoViews / stats.video) : 0;
        
        const isAsterasys = this.deviceMapping[device]?.isAsterasys ? '‚≠ê' : '  ';
        console.log(`${isAsterasys}${device}:`);
        console.log(`    Shorts: ${stats.shorts}Í∞ú (${shortsRatio}%) | ÌèâÍ∑† ${avgShortsViews.toLocaleString()}Ìöå`);
        console.log(`    ÏùºÎ∞òÏòÅÏÉÅ: ${stats.video}Í∞ú (${(100-shortsRatio).toFixed(1)}%) | ÌèâÍ∑† ${avgVideoViews.toLocaleString()}Ìöå`);
        console.log(`    Shorts Ï°∞ÌöåÏàò ÎπÑÏ§ë: ${shortsViewRatio}%`);
    });

    // RF vs HIFU Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù
    console.log('\n‚ö° RF vs HIFU Ïπ¥ÌÖåÍ≥†Î¶¨ ÎπÑÍµê:');
    ['RF', 'HIFU'].forEach(category => {
      const categoryDevices = Object.entries(categoryAnalysis[category])
        .sort(([,a], [,b]) => b.count - a.count);
      
      const totalCategoryVideos = categoryDevices.reduce((sum, [, stats]) => sum + stats.count, 0);
      const totalCategoryViews = categoryDevices.reduce((sum, [, stats]) => sum + stats.views, 0);
      
      console.log(`\n  ${category} Ïπ¥ÌÖåÍ≥†Î¶¨ (Ï¥ù ${totalCategoryVideos.toLocaleString()}Í∞ú ÎπÑÎîîÏò§, ${totalCategoryViews.toLocaleString()}Ìöå Ï°∞Ìöå):`);
      
      categoryDevices.slice(0, 5).forEach(([device, stats], index) => {
        const sharePercent = ((stats.count / totalCategoryVideos) * 100).toFixed(1);
        const avgViews = stats.count > 0 ? Math.round(stats.views / stats.count) : 0;
        const isAsterasys = this.deviceMapping[device]?.isAsterasys ? '‚≠ê' : '  ';
        
        console.log(`${isAsterasys}  ${index + 1}. ${device}: ${stats.count.toLocaleString()}Í∞ú (${sharePercent}%) | ÌèâÍ∑† ${avgViews.toLocaleString()}Ìöå`);
      });
    });

    this.contentTrends = {
      typeAnalysis,
      categoryAnalysis,
      insights: {
        shortsPopularity: 'ShortsÍ∞Ä Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú ÎÜíÏùÄ ÎπÑÏ§ë Ï∞®ÏßÄ',
        categoryLeader: {
          RF: Object.keys(categoryAnalysis.RF).sort((a, b) => categoryAnalysis.RF[b].count - categoryAnalysis.RF[a].count)[0],
          HIFU: Object.keys(categoryAnalysis.HIFU).sort((a, b) => categoryAnalysis.HIFU[b].count - categoryAnalysis.HIFU[a].count)[0]
        }
      }
    };

    return this;
  }

  saveProcessedData() {
    console.log('\nüíæ Ï≤òÎ¶¨Îêú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•...');
    
    // Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }

    // 1. ÏãúÏû• Ï†êÏú†Ïú® Îç∞Ïù¥ÌÑ∞ (CSV Ïä§ÌÉÄÏùº)
    const marketShareCSV = [
      ['ÎîîÎ∞îÏù¥Ïä§Î™Ö', 'Ïπ¥ÌÖåÍ≥†Î¶¨', 'ÏãúÏû•Îû≠ÌÇπ', 'ÌöåÏÇ¨', 'AsterasysÏó¨Î∂Ä', 'ÎπÑÎîîÏò§Ïàò', 'ÎπÑÎîîÏò§Ï†êÏú†Ïú®%', 'Ï¥ùÏ°∞ÌöåÏàò', 'Ï°∞ÌöåÏàòÏ†êÏú†Ïú®%', 'ÌèâÍ∑†Ï°∞ÌöåÏàò', 'Ï∞∏Ïó¨ÎèÑ%', 'Ï±ÑÎÑêÏàò'].join(','),
      ...this.marketShareData.map(d => [
        d.deviceName, d.category, d.marketRank, d.company, d.isAsterasys ? 'Y' : 'N',
        d.videoCount, d.videoSharePct, d.totalViews, d.viewSharePct, d.avgViews, d.engagementRate, d.uniqueChannels
      ].join(','))
    ].join('\n');
    
    fs.writeFileSync(path.join(this.outputDir, 'youtube_market_share.csv'), marketShareCSV, 'utf8');

    // 2. Asterasys Ïù∏ÏÇ¨Ïù¥Ìä∏ JSON
    const asterasysReport = {
      summary: {
        Ï¥ùÎπÑÎîîÏò§Ïàò: this.asterasysInsights.totalVideos,
        Ï¥ùÏ°∞ÌöåÏàò: this.asterasysInsights.totalViews,
        ÏãúÏû•Ï†êÏú†Ïú®_ÎπÑÎîîÏò§: this.asterasysInsights.marketShare.videoSharePct + '%',
        ÏãúÏû•Ï†êÏú†Ïú®_Ï°∞ÌöåÏàò: this.asterasysInsights.marketShare.viewSharePct + '%',
        ÌèâÍ∑†Ï°∞ÌöåÏàò: this.asterasysInsights.marketShare.avgViewsPerVideo
      },
      Ï†úÌíàÎ≥ÑÏÑ±Í≥º: this.asterasysInsights.products.map(p => ({
        Ï†úÌíàÎ™Ö: p.deviceName,
        Ïπ¥ÌÖåÍ≥†Î¶¨: p.category,
        YouTubeÏàúÏúÑ: this.marketShareData.findIndex(d => d.deviceName === p.deviceName) + 1,
        ÏãúÏû•ÏàúÏúÑ: p.marketRank,
        ÎπÑÎîîÏò§Ïàò: p.videoCount,
        Ï°∞ÌöåÏàò: p.totalViews,
        Ï∞∏Ïó¨ÎèÑ: p.engagementRate + '%',
        Ï±ÑÎÑêÏàò: p.uniqueChannels
      })),
      Ï£ºÏöîÍ≤ΩÏüÅÏÇ¨: this.asterasysInsights.topCompetitors.slice(0, 3).map(c => ({
        Ï†úÌíàÎ™Ö: c.deviceName,
        Ïπ¥ÌÖåÍ≥†Î¶¨: c.category,
        ÎπÑÎîîÏò§Ïàò: c.videoCount,
        Ï°∞ÌöåÏàò: c.totalViews,
        ÏãúÏû•Ï†êÏú†Ïú®: c.videoSharePct + '%'
      })),
      ÏΩòÌÖêÏ∏†Ìä∏Î†åÎìú: {
        ShortsÌôúÏö©ÎèÑ: 'RF/HIFU Î™®Îì† Ï†úÌíàÏóêÏÑú Shorts ÏΩòÌÖêÏ∏† ÌôúÎ∞ú',
        RFÏπ¥ÌÖåÍ≥†Î¶¨_1ÏúÑ: this.contentTrends.insights.categoryLeader.RF,
        HIFUÏπ¥ÌÖåÍ≥†Î¶¨_1ÏúÑ: this.contentTrends.insights.categoryLeader.HIFU
      },
      Î∂ÑÏÑùÏùºÏãú: new Date().toISOString()
    };

    fs.writeFileSync(
      path.join(this.outputDir, 'asterasys_youtube_insights.json'), 
      JSON.stringify(asterasysReport, null, 2), 
      'utf8'
    );

    // 3. ÎåÄÏãúÎ≥¥ÎìúÏö© ÏöîÏïΩ JSON
    const dashboardSummary = {
      overview: {
        totalVideos: this.data.length,
        totalDevices: 18,
        asterasysMarketShare: this.asterasysInsights.marketShare.videoSharePct,
        topDevice: this.marketShareData[0].deviceName,
        asterasysTopDevice: this.asterasysInsights.products.sort((a, b) => b.videoCount - a.videoCount)[0].deviceName
      },
      marketRankings: this.marketShareData.slice(0, 10).map((d, index) => ({
        rank: index + 1,
        device: d.deviceName,
        category: d.category,
        isAsterasys: d.isAsterasys,
        videos: d.videoCount,
        marketShare: d.videoSharePct + '%',
        views: d.totalViews
      })),
      asterasysProducts: this.asterasysInsights.products.map(p => ({
        name: p.deviceName,
        category: p.category,
        rank: this.marketShareData.findIndex(d => d.deviceName === p.deviceName) + 1,
        videos: p.videoCount,
        views: p.totalViews,
        channels: p.uniqueChannels
      })),
      contentInsights: [
        `Ï¥ù ${Object.keys(this.keywordStats.keywordCounts).length}Í∞ú ÌÇ§ÏõåÎìú Í≤ÄÏÉâ`,
        `Asterasys ÏãúÏû•Ï†êÏú†Ïú®: ${this.asterasysInsights.marketShare.videoSharePct}%`,
        `${this.contentTrends.insights.categoryLeader.RF}Ïù¥ RF Ïπ¥ÌÖåÍ≥†Î¶¨ 1ÏúÑ`,
        `${this.contentTrends.insights.categoryLeader.HIFU}Í∞Ä HIFU Ïπ¥ÌÖåÍ≥†Î¶¨ 1ÏúÑ`
      ]
    };

    fs.writeFileSync(
      path.join(this.outputDir, 'youtube_dashboard_summary.json'), 
      JSON.stringify(dashboardSummary, null, 2), 
      'utf8'
    );

    console.log(`\n‚úÖ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å: ${this.outputDir}`);
    console.log('ÏÉùÏÑ±Îêú ÌååÏùº:');
    console.log('  üìä youtube_market_share.csv - ÏãúÏû•Ï†êÏú†Ïú® ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞');
    console.log('  ‚≠ê asterasys_youtube_insights.json - Asterasys Ï†ÑÏö© Î∂ÑÏÑù');
    console.log('  üì± youtube_dashboard_summary.json - ÎåÄÏãúÎ≥¥ÎìúÏö© ÏöîÏïΩ');

    return this;
  }

  async processAll() {
    try {
      await this.loadData();
      this.processBasicStats();
      this.analyzeMarketShare();
      this.analyzeAsterasysPerformance();
      this.analyzeContentTrends();
      this.saveProcessedData();
      
      console.log('\n' + '='.repeat(60));
      console.log('üéâ YouTube Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÏôÑÎ£å!');
      console.log('='.repeat(60));
      console.log(`üìä Ï¥ù ${this.data.length.toLocaleString()}Í∞ú ÎπÑÎîîÏò§ Î∂ÑÏÑù`);
      console.log(`üè• 18Í∞ú ÏùòÎ£åÍ∏∞Í∏∞ Î∏åÎûúÎìú (RF 9Í∞ú + HIFU 9Í∞ú)`);
      console.log(`‚≠ê Asterasys ÏãúÏû•Ï†êÏú†Ïú®: ${this.asterasysInsights.marketShare.videoSharePct}% (ÎπÑÎîîÏò§ Ïàò Í∏∞Ï§Ä)`);
      console.log(`üëÅÔ∏è Asterasys Ï°∞ÌöåÏàò Ï†êÏú†Ïú®: ${this.asterasysInsights.marketShare.viewSharePct}%`);
      console.log(`üî• Asterasys ÏµúÍ≥† Ï†úÌíà: ${this.asterasysInsights.products.sort((a, b) => b.videoCount - a.videoCount)[0].deviceName}`);
      
    } catch (error) {
      console.error('‚ùå Ï≤òÎ¶¨ Ïã§Ìå®:', error.message);
      throw error;
    }
  }
}

// Ïã§Ìñâ
async function main() {
  const processor = new YouTubeDataProcessor(
    path.join(process.cwd(), 'data', 'raw', 'dataset_youtube-scraper_2025-08-28_09-52-54-390.json')
  );
  
  await processor.processAll();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = YouTubeDataProcessor;